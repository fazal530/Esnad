{#
/**
 * @file
 * Default theme implementation to display a block.
 *
 * Available variables:
 * - plugin_id: The ID of the block implementation.
 * - label: The configured label of the block if visible.
 * - configuration: A list of the block's configuration values.
 *   - label: The configured label for the block.
 *   - label_display: The display settings for the label.
 *   - provider: The module or other provider that provided this block plugin.
 *   - Block plugin specific settings will also be stored here.
 * - in_preview: Whether the plugin is being rendered in preview mode.
 * - content: The content of this block.
 * - attributes: array of HTML attributes populated by modules, intended to
 *   be added to the main container tag of this template.
 *   - id: A valid HTML ID and guaranteed unique.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 *
 * @see template_preprocess_block()
 *
 * @ingroup themeable
 */
#}
<div{{ attributes }}>
  {{ title_prefix }}
  {% if label %}
    <h2{{ title_attributes }}>{{ label }}</h2>
  {% endif %}
  {{ title_suffix }}
  {% block content %}
    {# <a class="use-ajax" href="/search" data-dialog-type="modal" data-dialog-options="{&quot;width&quot;:1240,&quot;height&quot;:550}">
      {{content.field_search}}

    </a> #}
    <div class="search-wrapper"></div>

  {% endblock %}
</div>


<script>
document.addEventListener("DOMContentLoaded", function () {
  console.log('abc');
  const trigger = document.querySelector(".search-wrapper"); // the element user clicks to open search
  const overlay = document.createElement("div");
  overlay.classList.add("search-overlay");
  document.body.appendChild(overlay);

  const searchBlock = document.getElementById("block-sass-theme-msd-exposedformarticlespage-1");

  // Create close button if not in markup
  if (!searchBlock.querySelector(".close-btn")) {
    const closeBtn = document.createElement("span");
    closeBtn.classList.add("close-btn");
    closeBtn.innerHTML = "&times;";
    searchBlock.appendChild(closeBtn);

    closeBtn.addEventListener("click", () => {
      overlay.classList.remove("active");
      searchBlock.classList.remove("active");
    });
  }

  // Open on trigger click
  trigger.addEventListener("click", () => {
    overlay.classList.add("active");
    searchBlock.classList.add("active");
    overlay.appendChild(searchBlock); // move block into overlay
  });

  // Close when clicking outside
  overlay.addEventListener("click", (e) => {
    if (e.target === overlay) {
      overlay.classList.remove("active");
      searchBlock.classList.remove("active");
      document.body.appendChild(searchBlock); // put block back if needed
    }
  });
});

</script>